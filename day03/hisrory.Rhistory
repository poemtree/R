source('~/.active-rstudio-document')
install.packages('googlecis')
install.packages('googlevis')
install.packages('Googlevis')
install.packages('googleVis')
source('C:/rproject/day03/r1.R')
suppressPackageStartupMessages(library(googleVis))
install.packages('toJSON')
install.packages('jsonlite')
install.packages("jsonlite")
install.packages('jsonlite')
install.packages('googleVis')
source('C:/rproject/day03/r1.R')
class(Fruits)
print(Fruits)
Fruits$Fruit=='Bananas'
Fruits[Fruits$Fruit=='Bananas',]
bananas <- Fruits[Fruits$Fruit=='Bananas',]
colSum(bananas$Sales)
sum(bananas$Sales)
sum=sum(bananas$Sales)
sf1 <- aggregate(Sales~Fruits,Fruits,sum)
sf1 <- aggregate(Sales~Fruit,Fruits,sum)
df1 <- aggregate(Sales~Fruit,Fruits,sum)
source('C:/rproject/day03/r1.R')
library('googleVis')
class(Fruits)
print(Fruits)
bananas <- Fruits[Fruits$Fruit=='Bananas',]
sum(bananas$Sales)
df1 <- aggregate(Sales~Fruit,Fruits,sum)
View(df1)
df2 <- aggregate(Profit~Year,Fruits,sum)
df3 <- aggregate(Profit~Fruit+Year,Fruits,sum)
View(df3)
df4 <- Fruits[,c(4:6)]
apply(df2,2,sum)
apply(df2,2,sum)
df4
apply(df2,2,sum)
apply(df4,2,sum)
yymmSalesSum <- aggregate(Sales~Date, Fruits, sum)
View(yymmSalesSum)
View(yymmSalesSum)
View(yymmSalesSum)
aggregate(Sales~Date$3, Fruits, sum)
aggregate(Sales~Date[3], Fruits, sum)
#aggregate
yymmSalesSum <- aggregate(Sales~substr(Date,1,4)+substr(Date,6,7), Fruits, sum)
View(yymmSalesSum)
df1 <- (aggregate(Sales~substr(Date,1,4)+substr(Date,6,7), Fruits, sum) - aggregate(Profit~substr(Date,1,4)+substr(Date,6,7), Fruits, sum)) * 1.83
aggregate(Profit~substr(Date,1,4)+substr(Date,6,7), Fruits, sum)
aggregate(Sales~substr(Date,1,4)+substr(Date,6,7), Fruits, sum)
df1 <- (aggregate(Sales~substr(Date,1,4)+substr(Date,6,7), Fruits, sum)$Sales - aggregate(Profit~substr(Date,1,4)+substr(Date,6,7), Fruits, sum)$Profit) * 1.83
yymmSalesSum$Psales <- (yymmSalesSum$Sales - aggregate(Profit~substr(Date,1,4)+substr(Date,6,7), Fruits, sum)$Profit) * 1.83
View(yymmSalesSum)
#3.
yymmSalesSum$Fee <- (yymmSalesSum$Sales - aggregate(Profit~substr(Date,1,4)+substr(Date,6,7), Fruits, sum)$Profit) * 0.1
View(yymmSalesSum)
yymmSalesSum$Fee
Month <- (substr(Fruits$Date,6,7))aggregate(Fee~Year+Month,Fruits,sum)
(substr(Fruits$Date,6,7))
Month <- (substr(Fruits$Date,6,7))
aggregate(Fee~Year+Month,Fruits,sum)
aggregate(Fee~(substr(Fruits$Date,1,4))+(substr(Fruits$Date,6,7)),Fruits,sum)
aggregate(Fee~(substr(Fruits$Date,1,4))+(substr(Fruits$Date,6,7)),Fruits,sum)
tf <- data.frame(Col1=c(1:5),Col2=c(6:10))
View(tf)
install.package('dplyr')
install.package('dplyr')
install.package(dplyr)
install.package('dplyr')
install.packages('dplyr')
source('C:/rproject/day03/r3.R')
source('C:/rproject/day03/r3.R')
tfc <- rename(tf,'xx1'=x)
source('C:/rproject/day03/r3.R')
View(tfc)
mpg
library(ggplot2)
mpg
mpg <- rename(mpg, 'city'='cty', 'higway'='hwy')
mpg$total <- (mpg$city+mpg$higway)/2
mpg
hist(mpg$total)
mpg$test <- ifelse(pmg$total >= 20, 'PASS','FAIL')
table(mpg$test)
mpg$test <- ifelse(mpg$total >= 20, 'PASS','FAIL')
table(mpg$test)
qplot(mpg$test)
as.vector(table(mpg$test))
mpg$grade <- ifelse(mpg$total >= 30, 'A',(ifelse(mpg$total >= 20, 'B', 'C')))
View(mpg)
qplot(mpg$grade)
source('C:/rproject/day03/r4.R')
str(modwest)
str(midwest)
# ggplot2의 midwest 데이터를 데이터 프레임 형태로 볼러온 다음 데이터의 특징을 파악하세요
testMidWest <- midwest
str(testMidWest)
testMidWest <- rename(midwest, total=poptotal, asain = popasain)
testMidWest <- rename(midwest, total='poptotal'', asain = 'popasain')
testMidWest <- rename(midwest, total='poptotal', asain = 'popasain')
testMidWest <- rename(midwest, total=poptotal, asain = popasian)
View(testMidWest)
source('C:/rproject/day03/r4.R', encoding = 'UTF-8')
testMidWest$asian% <- testMidWest$asian/testMidWest$total
testMidWest$asian_to_total <- testMidWest$asian/testMidWest$total
hist(testMidWest$asian_to_total)
View(testMidWest)
source('C:/rproject/day03/r4.R', encoding = 'UTF-8')
View(testMidWest)
mean(testMidWest$asian_to_total)
testMidWest$a2t_size <- ifelse(testMidWest$asian_to_total > mean(testMidWest$asian_to_total), 'large', 'small')
# 5. "large"와 "small"에 해당하는 지역이 얼마나 되는지 빈도표와 빈도 막대 그래프를
# 만들어 확인해 보세요.
table(testMidWest$a2t_size)
qplot(testMidWest$a2t_size)
mympg <- sqldf('SELECT * FROM mpg')
source('C:/rproject/day03/r5.R')
install.packages(sqldf)
install.packages(sqldf)
install.packages('sqldf')
source('C:/rproject/day03/r5.R')
View(mympg)
mympg
mympg <- sqldf('SELECT *, (cty+hwy)/2 AS tot FROM mpg')
View(mympg)
mympg$test <- sqldf('SELECT CASE tot WHEN >= 20 THEN "pass" else "fail" FROM mympg')
mympg$test <- sqldf('SELECT CASE WHEN tot >= 20 THEN "pass" else "fail" FROM mympg')
mympg$test <- sqldf('SELECT CASE tot WHEN tot >= 20 THEN "pass" else "fail" FROM mympg')
mympg$test <- sqldf('SELECT CASE WHEN tot >= 20 THEN "pass" else "fail" FROM mympg')
mympg <- sqldf('SELECT *, (cty+hwy)/2 AS tot FROM mpg')
mympg$test <- sqldf('SELECT CASE WHEN tot >= 20 THEN "pass" else "fail" FROM mympg')
mympg2 <- sqldf('SELECT *, CASE WHEN tot >= 20 THEN "pass" else "fail" FROM mympg')
mympg$test <- sqldf('SELECT CASE WHEN tot >= 20 THEN "pass" else "fail" AS test FROM mympg')
mympg$test <- sqldf('SELECT CASE WHEN tot >= 20 THEN "pass" ELSE "fail" AS test FROM mympg')
mympg$test <- sqldf('SELECT CASE tot WHEN >= 20 THEN "pass" ELSE "fail" END AS test FROM mympg')
mympg$test <- sqldf('SELECT CASE WHEN tot >= 20 THEN "pass" ELSE "fail" END AS test FROM mympg')
View(mympg)
# install.packages(sqldf)
library(ggplot2)
library(sqldf)
mympg <- sqldf('SELECT *, (cty+hwy)/2 AS tot FROM mpg')
mympg$test <- sqldf('SELECT CASE WHEN tot >= 20 THEN "pass" ELSE "fail" END FROM mympg')
View(mympg)
sqldf('SELECT CASE WHEN tot >= 20 THEN "pass" ELSE "fail" END FROM mympg')
View(mympg)
mympg <- colbind(mympg, sqldf('SELECT CASE WHEN tot >= 20 THEN "pass" ELSE "fail" END AS test FROM mympg'))
mympg <- cbind(mympg, sqldf('SELECT CASE WHEN tot >= 20 THEN "pass" ELSE "fail" END AS test FROM mympg'))
# install.packages(sqldf)
library(ggplot2)
library(sqldf)
mympg <- sqldf('SELECT *, (cty+hwy)/2 AS tot FROM mpg'
mympg <- cbind(mympg, sqldf('SELECT CASE WHEN tot >= 20 THEN "pass" ELSE "fail" END AS test FROM mympg'))
library(ggplot2)
library(sqldf)
mympg <- sqldf('SELECT *, (cty+hwy)/2 AS tot FROM mpg')
mympg <- cbind(mympg, sqldf('SELECT CASE WHEN tot >= 20 THEN "pass" ELSE "fail" END AS test FROM mympg'))
View(mympg)
source('C:/rproject/day03/r6.R', encoding = 'UTF-8')
source('C:/rproject/day03/r6.R', encoding = 'UTF-8')
source('C:/rproject/day03/r6.R', encoding = 'UTF-8')
c1 <- exam %>% filter(class ==1)
exam %>% filter(class ==1)
# 1학급이 아닌 학생을 추출
exam %>% filter(class != 1)
# 수학점수가 50정을 초과한 학생을 추출
exam %>% filter(math > 50)
# 여러 조건을 충족하는 행 추출하기
exam %>% filter(class == 1 & math >= 50)
# 여러 조건 중 하나 이상 충족하는 행 추출하기 (OR 연산) -- '|'
exam %>% filter(math >= 90 | english >= 90)
# 목록에 해당하는 행 추출하기 (다중 OR연산 = IN 연산) -- '조건|조건|조건' 또는 '%in%'
exam %>% filter(class == 1 | class == 3 | class == 5)
exam %>% filter(class %in% c(1, 3, 5))
mean((exam %>% filter(displ<=4)$hwy))
(exam %>% filter(displ<=4))
(mpg %>% filter(displ<=4))
(mpg %>% filter(displ<=4))$hwy
mean((mpg %>% filter(displ<=4))$hwy)
ifelse(mean((mpg %>% filter(displ<=4))$hwy) > mean((mpg %>% filter(displ>=5))$hwy),'4', '5')
ifelse(mean((mpg %>% filter(displ<=4))$hwy) > mean((mpg %>% filter(displ>=5))$hwy),'4 이하인 자동차', '5이상인 자동차')
ifelse(mean((mpg %>% filter(manufacturer=='audi'))$cty) > mean((mpg %>% filter(displ=='totyta'))$cty),'audi', 'toyota')
mpg %>% filter(manufacturer=='audi')
(mpg %>% filter(manufacturer=='audi'))$cty
mean((mpg %>% filter(manufacturer=='audi'))$cty)
mean((mpg %>% filter(displ=='totyta'))$cty)
ifelse(mean((mpg %>% filter(manufacturer=='audi'))$cty) > mean((mpg %>% filter(manufacturer=='totyta'))$cty),'audi', 'toyota')
mean((mpg %>% filter(manufacturer=='totyta'))$cty)
ifelse(mean((mpg %>% filter(manufacturer=='audi'))$cty) > mean((mpg %>% filter(manufacturer=='toyota'))$cty),'audi', 'toyota')
mean((mpg %>% filter(manufacturer=='toyota'))$cty)
(mpg %>% filter(manufacturer %in% ('chevrolet', 'ford', 'honda')))$hwy
(mpg %>% filter(manufacturer %in% c('chevrolet', 'ford', 'honda')))$hwy
means((mpg %>% filter(manufacturer %in% c('chevrolet', 'ford', 'honda')))$hwy)
mpg %>% filter(manufacturer %in% c('chevrolet', 'ford', 'honda'))
mean((mpg %>% filter(manufacturer %in% c('chevrolet', 'ford', 'honda')))$hwy)
# 변수 추출하기
exam %>% select(math)
# 여러 열 추출하기
exam %>% select(class, math, english)
# 변수 제외하기
exam %>% select(-math)
exam %>% select(-math, -english)
# filter()와 select() 조합하기
# 1반 학생들의 영어 점
exam %>% filter(class == 1) %>% select(english)
exam %>%
filter(class == 1) %>%
select(english)
# 일부만 출력하기 -- 추출이 아니다...
exam %>% select(id, math) %>% head
# 일부만 출력하기 -- 추출이 아니다...
# head를 사용하면 6행 까지만 출력되며 head(숫자)를 사용하면 숫자 만큼 출력 된다.
exam %>% select(id, math) %>% head(19)
# 일부만 출력하기 -- 추출이 아니다...
# head를 사용하면 6행 까지만 출력되며 head(숫자)를 사용하면 숫자 만큼 출력 된다.
exam %>% select(id, math) %>% head(5)
exam %>% select(id, math) %>% tail(5)
# tail은 아래에서 위로... 숫자 지정은 head와 동일..
exam %>% select(id, math) %>% tail()
# 오름차순으로 정렬하기
exam %>% arrange(math)
# 내림차순으로 정렬하기
exam %>% arrange(desc(math))
# 여러개의 기준으로 정렬하기 -- 입력한 순서대로 정렬 된다..
exam %>% arrange(class, math)
# 여러개의 기준으로 정렬하기 -- 입력한 순서대로 정렬 된다..
exam %>% arrange(class, desc(math))
exam %>% arrange(desc(class, math))
exam %>% arrange(desc(class), desc(math))
exam %>% arrange(desc(class, math))
exam
exam[3:4]
rowMeans(exam[3:5])
ex1 <- cbind(exam, avg=rowMeans(exam[3:5]))
ex1 %>% arrange(class, avg)
ex1 %>% arrange(class, desc(avg))
ex1 <- cbind(exam, avg=round(rowMeans(exam[3:5]),2))
source('C:/rproject/day03/r8.R', encoding = 'UTF-8')
library(dplyr)
# arrange() -- 원하는 순서대로 정렬한다. 함수 안에 기준 컬럼을 입력한다.
# 오름차순으로 정렬하기
exam %>% arrange(math)
# 내림차순으로 정렬하기
exam %>% arrange(desc(math))
# 여러개의 기준으로 정렬하기 -- 입력한 순서대로 정렬 된다..
exam %>% arrange(class, math)
exam %>% arrange(desc(class), desc(math))
# exam %>% arrange(desc(class, math)) 은 될 것 같지만 안된다... 주의 하
# 오름과 내림차순 혼용
exam %>% arrange(class, desc(math))
ex1 <- cbind(exam, avg=round(rowMeans(exam[3:5]),2))
exam[3:5])
library(dplyr)
# 오름차순으로 정렬하기
exam %>% arrange(math)
library(sqldf)
source('C:/rproject/day03/r8.R', encoding = 'UTF-8')
ex1 %>% arrange(class, desc(avg))
# 컬럼 추가하기
exam %>% mutate(total = math + english + science) %>% head
exam
source('C:/rproject/day03/9r.R', encoding = 'UTF-8')
View(exam)
# 컬럼 추가
exam %>% mutate(total = math + english + science)
# 삽입을 할 경우..
ex1 <- exam %>% mutate(total = math + english + science)
# 여러 컬럼을 추가하
exam %>% mutate(total=total = math + english + science, mean = (math + english + science)/3 )
# 여러 컬럼을 추가하
exam %>% mutate(total = math + english + science, mean = (math + english + science)/3 )
exam %>% mutate(total = math + english + science, mean = total/3)
# 미리 만들어진 컬럼을 사용하여 연산이 가능하다.. 위처럼 구현하지 말자..
exam %>% mutate(total = math + english + science, mean = total/3)
# mutate()와 ifelse() 사용 -- 조건에 따라 다른 값을 부여한 변수를 추가할 수 있다
exam %>% mutate(test = ifelse(science > 60, 'pass', 'fail'))
# 다중 ifelse()문 사용
ex1 %>% mutate(grade = ifelse(total >= 270, 'A', ifelse(total >= 240, 'B', ifelse(total >= 210, 'C', ifelse(total >= 180, 'D', 'F')))))
# arrange()를 사용하여 정렬하기
exam %>% mutate(total = math + english + science) %>% arrange(total)
# arrange()를 사용하여 정렬하기
exam %>% mutate(total = math + english + science) %>% arrange(desc(total))
mympg <- mpg
mpg %>% mutate(tot = cty + hwy)
mympg <- mpg %>% mutate(tot = cty + hwy)
mympg <- mympg %>% mutate(avg = tot/2)
# 3.
mympg %>% arrange(desc(avg) %>% head(3)
# 3.
mympg %>% arrange(desc(avg)) %>% head(3)
# 3.
mympg %>% arrange(desc(avg)) %>% head(3)
# 3.
mympg %>% arrange(desc(avg)) %>% head(3)
mpg %>% mutate(tot = cty+hwy, avg = tot/2) %>% arrange(desc(avg)) %>% head(3)
savehistory("C:/rproject/day03/hisrory.Rhistory")
